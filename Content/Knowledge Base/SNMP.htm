<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="925" MadCap:lastWidth="766">
    <head>
    </head>
    <body>
        <h1 MadCap:autonum="CHAPTER 1 ">Enabling SNMP monitoring for CloudByte ElastiStor</h1>
        <p>You can monitor ElastiStor storage Node using external monitoring systems such as Nagios, OpenNMS, Ganglia, or Zabbix. This document provides the procedures to enable SNMP monitoring.</p>
        <ol>
            <li>	SSH to the ElastiStor Node.	</li>
            <li>Do the following with the default snmpd.conf:
			<ol><li>Copy the snmpd.conf to /usr/local/share/snmp/ using the following command: cp /etc/snmpd.config /usr/local/share/snmp/snmpd.conf
			</li><li>Edit the file to change the traphost (to your trap server).
			</li></ol></li>
            <li>Do the following with the sample snmpd.conf:
			<ol><li>Copy the file to the location as follows: /etc/snmpd.conf.
			</li><li>Allow SNMP access to your monitoring server by adding an entry, for example com2sec mynetwork 20.10.0.0/16 public. Here, 20.10.0.0/16 is the subnet range.
			</li><li>In the following lines, update trapsink, trap2sink, and informsink (based on the SNMP protocol version) to your monitoring server IP address:
			</li><pre>trapsink 20.10.43.3 public
trap2sink 20.10.43.3 public
informsink 20.10.43.3 public </pre></ol></li>
            <p class="note">Note: The modifications in the step 3.1 and 3.2 are highlighted in the snmpd.conf file provided in the following section Sample snmpd.conf.</p>
            <li>	Restart the snmpd service using the following command: service snmpd onerestart</li>
            <li>Stop the snmptrapd service using the following command: service snmptrapd onestop</li>
        </ol>
        <h3>Sample snmpd.conf</h3><pre xml:space="preserve">###############################################################################
     #
     # EXAMPLE.conf:
     #   An example configuration file for configuring the snmpd agent.
     #
     ###############################################################################
     #
     # This file is intended to only be an example.  If, however, you want
     # to use it, it should be placed in /usr/local/etc/snmp/snmpd.conf.
     # When the snmpd agent starts up, this is where it will look for it.
     #
     # You might be interested in generating your own snmpd.conf file using
     # the "snmpconf" program (perl script) instead.  It's a nice menu
        # based interface to writing well commented configuration files.  Try it!
        #
        # Note: This file is automatically generated from EXAMPLE.conf.def.
        # Do NOT read the EXAMPLE.conf.def file! Instead, after you have run
        # configure &amp; make, and then make sure you read the EXAMPLE.conf file
        # instead, as it will tailor itself to your configuration.
        # All lines beginning with a '#' are comments and are intended for you
        # to read.  All other lines are configuration commands for the agent.
        #
        # PLEASE: read the snmpd.conf(5) manual page as well!
        #
        ###############################################################################
        # Access Control
        ###############################################################################
        # YOU SHOULD CHANGE THE "COMMUNITY" TOKEN BELOW TO A NEW KEYWORD ONLY
        # KNOWN AT YOUR SITE.  YOU *MUST* CHANGE THE NETWORK TOKEN BELOW TO
        # SOMETHING REFLECTING YOUR LOCAL NETWORK ADDRESS SPACE.
        # By far, the most common question I get about the agent is "why won't
        # it work?", when really it should be "how do I configure the agent to
        # allow me to access it?"
        #
        # By default, the agent responds to the "public" community for read
        # only access, if run out of the box without any configuration file in
        # place.  The following examples show you other ways of configuring
        # the agent so that you can change the community names, and give
        # yourself write access as well.
        #
        # The following lines change the access permissions of the agent so
        # that the COMMUNITY string provides read-only access to your entire
        # NETWORK (EG: 10.10.10.0/24), and read/write access to only the
        # localhost (127.0.0.1, not its real ipaddress).
        #
        # For more information, read the FAQ as well as the snmpd.conf(5)
        # manual page.
        ####
        # First, map the community name (COMMUNITY) into a security name
        # (local and mynetwork, depending on where the request is coming
        # from):
        #       sec.name  source          community
        com2sec local     localhost       public
        com2sec mynetwork 192.168.1.1     public
        com2sec mynetwork 192.168.2.0/24  public
        com2sec mynetwork 20.10.0.0/16    public
        ####
        # Second, map the security names into group names:
        #               sec.model  sec.name
        group MyRWGroup v1         local
        group MyRWGroup v2c        local
        group MyRWGroup usm        local
        group MyROGroup v1         mynetwork
        group MyROGroup v2c        mynetwork
        group MyROGroup usm        mynetwork
        ####
        # Third, create a view for us to let the groups have rights to:
        #           incl/excl subtree                          mask
        view all    included  .1                               80
        ####
        # Finally, grant the 2 groups access to the 1 view with different
        # write permissions:
        #                context sec.model sec.level match  read   write  notif
        access MyROGroup ""      any       noauth    exact  all    none   none
        access MyRWGroup ""      any       noauth    exact  all    all    none
        # -----------------------------------------------------------------------------
        ###############################################################################
        # System contact information
        #
        # It is also possible to set the sysContact and sysLocation system
        # variables through the snmpd.conf file.  **PLEASE NOTE** that setting
        # the value of these objects here makes these objects READ-ONLY
        # (regardless of any access control settings).  Any attempt to set the
        # value of an object whose value is given here will fail with an error
        # status of notWritable.
        syslocation MyLocation
        syscontact SysAdmin &lt;sysadmin@example.com&gt;
        # Example output of snmpwalk:
        #   % snmpwalk -v 1 -c public localhost system
        #   system.sysDescr.0 = "SunOS name sun4c"
        #   system.sysObjectID.0 = OID: enterprises.ucdavis.ucdSnmpAgent.sunos4
        #   system.sysUpTime.0 = Timeticks: (595637548) 68 days, 22:32:55
        #   system.sysContact.0 = "Me &lt;me@somewhere.org&gt;"
        #   system.sysName.0 = "name"
        #   system.sysLocation.0 = "Right here, right now."
        #   system.sysServices.0 = 72
        # -----------------------------------------------------------------------------
        ###############################################################################
        # Process checks.
        #
        #  The following are examples of how to use the agent to check for
        #  processes running on the host.  The syntax looks something like:
        #
        #  proc NAME [MAX=0] [MIN=0]
        #
        #  NAME:  the name of the process to check for.  It must match
        #         exactly (ie, http will not find httpd processes).
        #  MAX:   the maximum number allowed to be running.  Defaults to 0.
        #  MIN:   the minimum number to be running.  Defaults to 0.
        #
        #  Examples:
        #
        #  Make sure at least one sendmail, but less than or equal to 10 are running.
        proc sendmail 10 1
        proc sshd
        proc cron
        ###############################################################################
        # disk checks
        #
        # disk PATH [MIN=DEFDISKMINIMUMSPACE]
        #
        # PATH:  mount path to the disk in question.
        # MIN:   Disks with space below this value will have the Mib's errorFlag set.
        #        Default value = DEFDISKMINIMUMSPACE.
        # Check the / partition and make sure it contains at least 10 megs.
        disk / 10000000
        ###############################################################################
        # load average checks
        #
        # load [1MAX=DEFMAXLOADAVE] [5MAX=DEFMAXLOADAVE] [15MAX=DEFMAXLOADAVE]
        #
        # 1MAX:   If the 1 minute load average is above this limit at query
        #         time, the errorFlag will be set.
        # 5MAX:   Similar, but for 5 min average.
        # 15MAX:  Similar, but for 15 min average.
        # Check for loads:
        load 12 14 14
        # -----------------------------------------------------------------------------
        # Inteface up and down
        linkUpDownNotifications yes
        # Trap server information
        trapsink    20.10.43.3 public
        trap2sink   20.10.43.3 public
        informsink  20.10.43.3 public
			</pre>
        <h3>Verifying the SNMP access and traps</h3>
        <h4>Verify SNMP access</h4>
        <p>From your monitoring host, run the snmpwalk command to check the access to ElastiStor SNMP data as shown in the following example:</p><pre xml:space="preserve">root@node2:~ # snmpwalk -v1 -c public &lt;ElastiStor_IP Address&gt; SNMPv2-MIB::sysDescr.0
SNMPv2-MIB::sysDescr.0 = STRING: CloudByte ES 1.4.0-Elastistor CloudByte 1.4.0-Elastistor #24 r1436: Thu Jan 29 19:59:04 IST 2015 root@buildmachine2.cb.in:/usr/obj/usr/local/jenkins/jobs/1.4.0.p1/workspace/esos/sys/GENERIC amd64 </pre>
        <h4>Verify SNMP traps</h4>
        <p>Run the snmptrapd command on the monitoring server to make sure that you get traps from ElastiStor, as shown in the following example:</p><pre xml:space="preserve">root@node2:~ # echo "authCommunity log,execute,net public" &gt; /usr/local/etc/snmptrapd.conf
SNMPv2-MIB::sysDescr.0 = STRING: CloudByte ES 1.4.0-Elastistor CloudByte 1.4.0-Elastistor #24 r1436: Thu Jan 29 19:59:04 IST 2015 root@buildmachine2.cb.in:/usr/obj/usr/local/jenkins/jobs/1.4.0.p1/workspace/esos/sys/GENERIC amd64
root@node2:~ # snmptrapd -f -Lo -c /usr/local/etc/snmptrapd.conf
NET-SNMP version 5.7.2
2015-02-02 16:38:33 &lt;UNKNOWN&gt; [UDP: [20.10.58.171]:45638-&gt;[20.10.43.3]:162]:
DISMAN-EVENT-MIB::sysUpTimeInstance = Timeticks: (833046) 2:18:50.46 SNMPv2-MIB::snmpTrapOID.0 = OID: NET-SNMP-AGENT-MIB::nsNotifyShutdown SNMPv2-MIB::snmpTrapEnterprise.0 = OID: NET-SNMP-MIB::netSnmpNotificationPrefix
2015-02-02 16:38:34 20.10.58.171(via UDP: [20.10.58.171]:53086-&gt;[20.10.43.3]:162) TRAP, SNMP v1, community public
NET-SNMP-MIB::netSnmpAgentOIDs.8 Cold Start Trap (0) Uptime: 0:00:00.69</pre><pre xml:space="preserve">2015-02-02 16:38:34 &lt;UNKNOWN&gt; [UDP: [20.10.58.171]:14927-&gt;[20.10.43.3]:162]:</pre><pre xml:space="preserve">DISMAN-EVENT-MIB::sysUpTimeInstance = Timeticks: (69) 0:00:00.69 SNMPv2-MIB::snmpTrapOID.0 = OID: SNMPv2-MIB::coldStart SNMPv2-MIB::snmpTrapEnterprise.0 = OID: NET-SNMP-MIB::netSnmpAgentOIDs.8
2015-02-02 16:38:34 &lt;UNKNOWN&gt; [UDP: [20.10.58.171]:36823-&gt;[20.10.43.3]:162]:
DISMAN-EVENT-MIB::sysUpTimeInstance = Timeticks: (69) 0:00:00.69 SNMPv2-MIB::snmpTrapOID.0 = OID: SNMPv2-MIB::coldStart SNMPv2-MIB::snmpTrapEnterprise.0 = OID: NET-SNMP-MIB::netSnmpAgentOIDs.8</pre>
    </body>
</html>